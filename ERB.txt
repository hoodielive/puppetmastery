= EERRBB  <<  OObbjjeecctt

(from ruby core)
------------------------------------------------------------------------------
= EERRBB  ----  RRuubbyy  TTeemmppllaattiinngg

== IInnttrroodduuccttiioonn

ERB provides an easy to use but powerful templating system for Ruby.  Using
ERB, actual Ruby code can be added to any plain text document for the purposes
of generating document information details and/or flow control.

A very simple example is this:

  require 'erb'

  x = 42
  template = ERB.new <<-EOF
    The value of x is: <%= x %>
  EOF
  puts template.result(binding)

_P_r_i_n_t_s_: The value of x is: 42

More complex examples are given below.

== RReeccooggnniizzeedd  TTaaggss

ERB recognizes certain tags in the provided template and converts them based
on the rules below:

  <% Ruby code -- inline with output %>
  <%= Ruby expression -- replace with result %>
  <%# comment -- ignored -- useful in testing %>
  % a line of Ruby code -- treated as <% line %> (optional -- see ERB.new)
  %% replaced with % if first thing on a line and % processing is used
  <%% or %%> -- replace with <% or %> respectively

All other text is passed through ERB filtering unchanged.

== OOppttiioonnss

There are several settings you can change when you use ERB:
* the nature of the tags that are recognized;
* the value of $SAFE under which the template is run;
* the binding used to resolve local variables in the template.

See the ERB.new and ERB#result methods for more detail.

== CChhaarraacctteerr  eennccooddiinnggss

ERB (or Ruby code generated by ERB) returns a string in the same character
encoding as the input string.  When the input string has a magic comment,
however, it returns a string in the encoding specified by the magic comment.

  # -*- coding: utf-8 -*-
  require 'erb'

  template = ERB.new <<EOF
  <%#-*- coding: Big5 -*-%>
    \_\_ENCODING\_\_ is <%= \_\_ENCODING\_\_ %>.
  EOF
  puts template.result

_P_r_i_n_t_s_: __E_N_C_O_D_I_N_G_ is Big5.

== EExxaammpplleess

=== PPllaaiinn  TTeexxtt

ERB is useful for any generic templating situation.  Note that in this
example, we use the convenient "% at start of line" tag, and we quote the
template literally with %q{...} to avoid trouble with the backslash.

  require "erb"

  # Create template.
  template = %q{
    From:  James Edward Gray II <james@grayproductions.net>
    To:  <%= to %>
    Subject:  Addressing Needs

    <%= to[/\w+/] %>:

    Just wanted to send a quick note assuring that your needs are being
    addressed.

    I want you to know that my team will keep working on the issues,
    especially:

    <%# ignore numerous minor requests -- focus on priorities %>
    % priorities.each do |priority|
      * <%= priority %>
    % end

    Thanks for your patience.

    James Edward Gray II
  }.gsub(/^  /, '')

  message = ERB.new(template, 0, "%<>")

  # Set up template data.
  to = "Community Spokesman <spokesman@ruby_community.org>"
  priorities = [ "Run Ruby Quiz",
                 "Document Modules",
                 "Answer Questions on Ruby Talk" ]

  # Produce result.
  email = message.result
  puts email

_G_e_n_e_r_a_t_e_s_:

  From:  James Edward Gray II <james@grayproductions.net>
  To:  Community Spokesman <spokesman@ruby_community.org>
  Subject:  Addressing Needs

  Community:

  Just wanted to send a quick note assuring that your needs are being addressed.

  I want you to know that my team will keep working on the issues, especially:

      * Run Ruby Quiz
      * Document Modules
      * Answer Questions on Ruby Talk

  Thanks for your patience.

  James Edward Gray II

=== RRuubbyy  iinn  HHTTMMLL

ERB is often used in .rhtml files (HTML with embedded Ruby).  Notice the need
in this example to provide a special binding when the template is run, so that
the instance variables in the Product object can be resolved.

  require "erb"

  # Build template data class.
  class Product
    def initialize( code, name, desc, cost )
      @code = code
      @name = name
      @desc = desc
      @cost = cost

      @features = [ ]
    end

    def add_feature( feature )
      @features << feature
    end

    # Support templating of member data.
    def get_binding
      binding
    end

    # ...
  end

  # Create template.
  template = %{
    <html>
      <head><title>Ruby Toys -- <%= @name %></title></head>
      <body>

        <h1><%= @name %> (<%= @code %>)</h1>
        <p><%= @desc %></p>

        <ul>
          <% @features.each do |f| %>
            <li><b><%= f %></b></li>
          <% end %>
        </ul>

        <p>
          <% if @cost < 10 %>
            <b>Only <%= @cost %>!!!</b>
          <% else %>
             Call for a price, today!
          <% end %>
        </p>

      </body>
    </html>
  }.gsub(/^  /, '')

  rhtml = ERB.new(template)

  # Set up template data.
  toy = Product.new( "TZ-1002",
                     "Rubysapien",
                     "Geek's Best Friend!  Responds to Ruby commands...",
                     999.95 )
  toy.add_feature("Listens for verbal commands in the Ruby language!")
  toy.add_feature("Ignores Perl, Java, and all C variants.")
  toy.add_feature("Karate-Chop Action!!!")
  toy.add_feature("Matz signature on left leg.")
  toy.add_feature("Gem studded eyes... Rubies, of course!")

  # Produce result.
  rhtml.run(toy.get_binding)

_G_e_n_e_r_a_t_e_s_ _(_s_o_m_e_ _b_l_a_n_k_
_l_i_n_e_s_ _r_e_m_o_v_e_d_)_:

  <html>
    <head><title>Ruby Toys -- Rubysapien</title></head>
    <body>

      <h1>Rubysapien (TZ-1002)</h1>
      <p>Geek's Best Friend!  Responds to Ruby commands...</p>

      <ul>
          <li><b>Listens for verbal commands in the Ruby language!</b></li>
          <li><b>Ignores Perl, Java, and all C variants.</b></li>
          <li><b>Karate-Chop Action!!!</b></li>
          <li><b>Matz signature on left leg.</b></li>
          <li><b>Gem studded eyes... Rubies, of course!</b></li>
      </ul>

      <p>
           Call for a price, today!
      </p>

    </body>
  </html>

== NNootteess

There are a variety of templating solutions available in various Ruby
projects:
* ERB's big brother, eRuby, works the same but is written in C for speed;
* Amrita (smart at producing HTML/XML);
* cs/Template (written in C for speed);
* RDoc, distributed with Ruby, uses its own template engine, which can be
  reused elsewhere;
* and others; search {RubyGems.org}[https://rubygems.org/] or {The Ruby
  Toolbox}[https://www.ruby-toolbox.com/].

Rails, the web application framework, uses ERB to create views.




------------------------------------------------------------------------------
= CCllaassss  mmeetthhooddss::

  new
  version

= IInnssttaannccee  mmeetthhooddss::

  def_class
  def_method
  def_module
  encoding
  filename
  lineno
  location=
  make_compiler
  new_toplevel
  result
  result_with_hash
  run
  set_eoutvar
  src

= AAttttrriibbuutteess::

  attr_accessor filename
  attr_accessor lineno
  attr_reader encoding
  attr_reader src

------------------------------------------------------------------------------
Also found in:
  gem activesupport-5.2.0

