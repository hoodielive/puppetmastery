IaaC

Resource -> what do you want? 
    user = xyz 
    uid = 5001
    pass = xxx 

    -> $user (object) -> [provider] -> [dsl (domain specific language)] 

    puppet/chef will do the translation into -> 

    user (resource) provider (who will take care of it i.e. ruby)


Declarative Approach  -> leverage and control the 'state' of our infrastructure 

Revision Control 

Recreate the Infrastructure out of code repo (code base) -> simplies migration and modularity (even disaster recovery)

Absolute 'consistency'

Puppet Automation 
    -> End State (always start with end state in mind) 
    
Layers 

    Web Server (NGINX) 
        - install 'Package'
        - create configuration 'File' 
        - start 'Service'
        - create 'Web Page'

        i.e ** Puppet resource[Package, File, Service, File]

        - Think about the process and configure from the 'end' of the 'state' you wish you implement the change

            Package [ state = installed ] 
            Config File [ state = created ] 
            Service [ state = started ] 
            Web Page [ state = created ] 
        
        **further** 
            Package 
                state = installed 
                    version = latest 

            Config File 
                state = created 
                ownership/permissions 
                    mode = '0644'
                    owner = 'root' 

            Service 
                state = started 
                enabled 

            Web Page [File] 
                state = created 
                source 
                ownership/permissions 

                * these are properties * 
                
    -> all these together is what you call a Resource 
    
    to write these, you have to write them to a file called a manifest (init.pp) 
        manifest, a collection of resources written for a certain object 
            with puppets dsl 


 Nodes is where you apply your modules (apps) 

    DSL -> Resources, Manifests, Modules 

    Load Balancers 

    Databases
#

######## Resources ########
- puppet looks at your infrastructure as a collection of entities: 
	packages
	cronjob
	file
	network interfaces
	service 
	directory
	user
	- > these entities are described as 'resources'
	- > resources are statements of configuration policy which are written using PUPPET'S DSL (Domain Specific Language) 

- puppet then translates these 'resources' into 'providers' which are platform specific procedures 
	(yum, apt, zypper) 

	So for example: If you want to install nginx - that would get translated to commands specific to that platform:
		apt for ubuntu 
		yum to redhat/centos
		zypper to opensuse

type:
	user { 'devops': 
		uid  	=> '5001',
		gid     => '5001',
		home    => '/home/devops',
		shell	=> '/bin/bash',
		ensure  => present,
	}

	To know what resource types are  available - go to the puppet reference or get core types cheat sheet 


#### MANIFESTS ####
- manifests are files which contain collection of resources 
- written to achieve a specific objective 
- have .pp extention (puppet dsl) 
- resources in a manifest can be applied in any order

base.pp
	Lets create a recipe base.pp with following resource specifications

	Create user
		- deploy 

	Install Packages 
		- tree
		- git
		- ntp
		- wget
		- unzip

	Start service 
		- ntp 
	
	Remove user 
		- dojo

	Add file /etc/motd with content "Property of XYZ"

#### MODULES ####

- modules are packages with manifests and supporting files 

- have 1:1 mapping with applications 

- let you create a library of reusable code 

- check out puppet forge: http://forge.puppet.com 

Anatomy of a Module: 
Manifests: 
    - files 
    - templates
    - data
    - spec
    - examples
    - metadata.json 
    - README.md


study - puppetlabs/puppet-ntp for a good example of modules 

# Parameters 
- code vs data 
- managing properties 

Puppet allows you to separate code from data (properties) 
- puppet supports providers 
- one module (create generic modules which can be shared [puppet forge] that can be reused (saves time)) 

code ->
  manifests 
    templates 

data -> 
  params -> 
    user defined
      -> hiera / child class 
    sys defined 
      -> facter 

User defined 
  params 
    user defined 
        hiera 
        params.pp (class)(child/sub class) 

Story of defaults 
  modules define the default properties 
  defaults are overridden from outside the modules 
  overriding of properties happens either from node defs or external data sources 
  this makes modules generic and sharable 

Defaults inside modules 

Params 
  params.pp (old way) 
  design pattern mixed with existing classes 
  can get complex with increasing properties and platform specific logic

  Params the story of sane defaults 
    puppet vs chef 
    chef started with puppet [ created a dedicated directory called attributes where you could define all the attributes of each app ] 


Hiera
  hiera (new way, with puppet 4) 
  dedicated place to store data
  well thought after solution
    can scale
    simplified data management

## ERB ## 
Use erb for dynamic content (content that will be changing) 

erb tags 
  <%= expression 
  <% conditions 
  -%> truncate blank lines  

## Steps for templating a file ## 
1. Create a Template 
2. Define parameters 
3. Update file resource to use template function 


### Parameterized Classes ### 
Scopes -> 
  child class
  parent class
  node scope
  top scope

  child/parent class 

  params -> init -> config -> service -> install 

  params houses (defaults) (variables) 
  init can override params :: but this would not accomodate for hosts that require different configurations, which is why puppetlabs
    created paramaterized classes () to determine scope. 

    for example:

      class tomcat (
        $xms = '63m'
        $xmx = '129m'
        $user = 'root'
        $group = 'tomcat'
      ) inherits tomcat::params {
        include java::install 
        include tomcat::install
        include tomcat::config
        include tomcat::service 

      } 
